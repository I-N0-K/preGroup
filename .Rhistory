pattern <- "\\s*([a-zA-Z0-9_\\.]+)\\s*(<|>|<=|>=|%in%)"
# Loop through each subrule and extract variable names
for (subrule in subrules) {
matches <- regmatches(subrule, gregexpr(pattern, subrule, perl = TRUE))
if (length(matches[[1]]) > 0) {
# Extract the variable names from the matches
vars <- gsub(pattern, "\\1", matches[[1]])
variables <- c(variables, vars)
}
}
# Count the frequency of each variable
variable_frequency <- table(variables)
return(variable_frequency)
}
# Extract all unique variables from the descriptions
all_variables <- unique(unlist(lapply(baseimp_in$description, function(desc) {
names(extract_variables_with_frequency(desc))
})))
# Initialize baseimp_out with baseimp_in and add columns for each variable with zeros
baseimp_out <- baseimp_in
for (var in all_variables) {
baseimp_out[[var]] <- 0
}
# Populate the columns with the frequency of each variable in the description
for (i in 1:nrow(baseimp_out)) {
variable_frequency <- extract_variables_with_frequency(baseimp_out$description[i])
for (var in names(variable_frequency)) {
baseimp_out[i, var] <- variable_frequency[[var]]
}
}
# Calculate the length of the description for each row
baseimp_out$DescriptionLength <- rowSums(baseimp_out[, all_variables])
# Calculate variable importance for each variable
for (var in all_variables) {
imp_col <- paste0(var, "_imp")
baseimp_out[[imp_col]] <- (baseimp_out$imp / baseimp_out$DescriptionLength) * baseimp_out[[var]]
}
baseimp_out[, c(all_variables, "DescriptionLength")] <- NULL
return(baseimp_out)
}
baseimp2 <- calculate_variable_importance(baseimp)
baseimp2
vimp <- imp$varimps
vimp
vimp$imp_prognostic <- sapply(vimp$varname, \(v) {
sum(baseimp2[ baseimp2$rule_type == "prognostic", paste0(v,"_imp")])
})
vimp
vimp$imp_prognostic <- sapply(vimp$varname, \(v) {
sum(baseimp2[ baseimp2$rule_type == "prognostic", paste0(v,"_imp")])
})
vimp$imp_prescriptive <- sapply(vimp$varname, \(v) {
sum(baseimp2[ baseimp2$rule_type == "prescriptive", paste0(v,"_imp")])
})
vimp
specify_imps <- function(imp_in) {
baseimps_in <- imp_in$baseimps
varimps_in <- imp_in$varimps
# Function to extract variables and their frequencies from a description
extract_variables_with_frequency <- function(description) {
# Split the description by '&' to handle subrules
subrules <- strsplit(description, "&")[[1]]
# Initialize an empty vector to store variable names
variables <- c()
# Define a regular expression pattern to match variable names
pattern <- "\\s*([a-zA-Z0-9_\\.]+)\\s*(<|>|<=|>=|%in%)"
# Loop through each subrule and extract variable names
for (subrule in subrules) {
matches <- regmatches(subrule, gregexpr(pattern, subrule, perl = TRUE))
if (length(matches[[1]]) > 0) {
# Extract the variable names from the matches
vars <- gsub(pattern, "\\1", matches[[1]])
variables <- c(variables, vars)
}
}
# Count the frequency of each variable
variable_frequency <- table(variables)
return(variable_frequency)
}
all_variables <- varimps_in$varname
# Initialize baseimp_out with baseimp_in and add columns for each variable with zeros
baseimps_out <- baseimp_in
for (var in all_variables) {
baseimps_out[[var]] <- 0
}
# Populate the columns with the frequency of each variable in the description
for (i in 1:nrow(baseimp_out)) {
variable_frequency <- extract_variables_with_frequency(baseimp_out$description[i])
for (var in names(variable_frequency)) {
baseimps_out[i, var] <- variable_frequency[[var]]
}
}
# Calculate the length of the description for each row
baseimps_out$DescriptionLength <- rowSums(baseimps_out[, all_variables])
# Calculate variable importance for each variable
for (var in all_variables) {
imp_col <- paste0(var, "_imp")
baseimps_out[[imp_col]] <- (baseimps_out$imp / baseimps_out$DescriptionLength) * baseimps_out[[var]]
}
baseimps_out[, c(all_variables, "DescriptionLength")] <- NULL
varimps_out <- varimps_in
# Rename the linear imps
varimps_out$imps <- NULL
varimps_out$imp_linear <- varimps_in$imps
varimps_out$imp_prognostic <- sapply(varimps_out$varname, \(v) {
sum(baseimps_out[baseimps_out$rule_type == "prognostic", paste0(v,"_imp")])
})
varimps_out$imp_prescriptive <- sapply(varimps_out$varname, \(v) {
sum(baseimps_out[baseimps_out$rule_type == "prescriptive", paste0(v,"_imp")])
})
varimps_out$imp_total <- varimps_out$imp_linear + varimps_out$imp_prognostic + varimps_out$imp_prescriptive
return(list(varimps = varimps_out, baseimps = baseimps_out))
}
imp2 <- specify_imps(imp)
specify_imps <- function(imp_in) {
baseimps_in <- imp_in$baseimps
varimps_in <- imp_in$varimps
# Function to extract variables and their frequencies from a description
extract_variables_with_frequency <- function(description) {
# Split the description by '&' to handle subrules
subrules <- strsplit(description, "&")[[1]]
# Initialize an empty vector to store variable names
variables <- c()
# Define a regular expression pattern to match variable names
pattern <- "\\s*([a-zA-Z0-9_\\.]+)\\s*(<|>|<=|>=|%in%)"
# Loop through each subrule and extract variable names
for (subrule in subrules) {
matches <- regmatches(subrule, gregexpr(pattern, subrule, perl = TRUE))
if (length(matches[[1]]) > 0) {
# Extract the variable names from the matches
vars <- gsub(pattern, "\\1", matches[[1]])
variables <- c(variables, vars)
}
}
# Count the frequency of each variable
variable_frequency <- table(variables)
return(variable_frequency)
}
all_variables <- varimps_in$varname
# Initialize baseimps_out with baseimps_in and add columns for each variable with zeros
baseimps_out <- baseimps_in
for (var in all_variables) {
baseimps_out[[var]] <- 0
}
# Populate the columns with the frequency of each variable in the description
for (i in 1:nrow(baseimps_out)) {
variable_frequency <- extract_variables_with_frequency(baseimps_out$description[i])
for (var in names(variable_frequency)) {
baseimps_out[i, var] <- variable_frequency[[var]]
}
}
# Calculate the length of the description for each row
baseimps_out$DescriptionLength <- rowSums(baseimps_out[, all_variables])
# Calculate variable importance for each variable
for (var in all_variables) {
imp_col <- paste0(var, "_imp")
baseimps_out[[imp_col]] <- (baseimps_out$imp / baseimps_out$DescriptionLength) * baseimps_out[[var]]
}
# Remove the columns corresponding to the variables and DescriptionLength
baseimps_out[, c(all_variables, "DescriptionLength")] <- NULL
varimps_out <- varimps_in
# Rename the linear imps
varimps_out$imp_linear <- varimps_in$imp
varimps_out$imp_prognostic <- sapply(varimps_out$varname, function(v) {
sum(baseimps_out[baseimps_out$rule_type == "prognostic", paste0(v, "_imp")], na.rm = TRUE)
})
varimps_out$imp_prescriptive <- sapply(varimps_out$varname, function(v) {
sum(baseimps_out[baseimps_out$rule_type == "prescriptive", paste0(v, "_imp")], na.rm = TRUE)
})
varimps_out$imp_total <- varimps_out$imp_linear + varimps_out$imp_prognostic + varimps_out$imp_prescriptive
return(list(varimps = varimps_out, baseimps = baseimps_out))
}
imp2 <- specify_imps(imp)
imp2
specify_imps <- function(imp_in) {
baseimps_in <- imp_in$baseimps
varimps_in <- imp_in$varimps
# Function to extract variables and their frequencies from a description
extract_variables_with_frequency <- function(description) {
# Split the description by '&' to handle subrules
subrules <- strsplit(description, "&")[[1]]
# Initialize an empty vector to store variable names
variables <- c()
# Define a regular expression pattern to match variable names
pattern <- "\\s*([a-zA-Z0-9_\\.]+)\\s*(<|>|<=|>=|%in%)"
# Loop through each subrule and extract variable names
for (subrule in subrules) {
matches <- regmatches(subrule, gregexpr(pattern, subrule, perl = TRUE))
if (length(matches[[1]]) > 0) {
# Extract the variable names from the matches
vars <- gsub(pattern, "\\1", matches[[1]])
variables <- c(variables, vars)
}
}
# Count the frequency of each variable
variable_frequency <- table(variables)
return(variable_frequency)
}
all_variables <- varimps_in$varname
# Initialize baseimps_out with baseimps_in and add columns for each variable with zeros
baseimps_out <- baseimps_in
for (var in all_variables) {
baseimps_out[[var]] <- 0
}
# Populate the columns with the frequency of each variable in the description
for (i in 1:nrow(baseimps_out)) {
variable_frequency <- extract_variables_with_frequency(baseimps_out$description[i])
for (var in names(variable_frequency)) {
baseimps_out[i, var] <- variable_frequency[[var]]
}
}
# Calculate the length of the description for each row
baseimps_out$DescriptionLength <- rowSums(baseimps_out[, all_variables])
# Calculate variable importance for each variable
for (var in all_variables) {
imp_col <- paste0(var, "_imp")
baseimps_out[[imp_col]] <- (baseimps_out$imp / baseimps_out$DescriptionLength) * baseimps_out[[var]]
}
# Remove the columns corresponding to the variables and DescriptionLength
baseimps_out[, c(all_variables, "DescriptionLength")] <- NULL
varimps_out <- varimps_in
# Rename the linear imps
varimps_out$imp <- NULL
varimps_out$imp_linear <- varimps_in$imp
varimps_out$imp_prognostic <- sapply(varimps_out$varname, function(v) {
sum(baseimps_out[baseimps_out$rule_type == "prognostic", paste0(v, "_imp")], na.rm = TRUE)
})
varimps_out$imp_prescriptive <- sapply(varimps_out$varname, function(v) {
sum(baseimps_out[baseimps_out$rule_type == "prescriptive", paste0(v, "_imp")], na.rm = TRUE)
})
varimps_out$imp_total <- varimps_out$imp_linear + varimps_out$imp_prognostic + varimps_out$imp_prescriptive
varimps_out <- varimps_out[, c("varname", "imp_total", "imp_linear", "imp_prognostic", "imp_prescriptive")]
return(list(varimps = varimps_out, baseimps = baseimps_out))
}
imp2 <- specify_imps(imp)
imp2
barplot(imp2$varimps, xlab = "", ylab = ylab,
main = main, cex.axis = cex.axis, legend.text = legend.text,
args.legend = args.legend, ...)
barplot(imp2$varimps, xlab = "", ylab = "ylab"
)
barplot(imp2$varimps, xlab = "", ylab = "ylab"
)
barplot(tr(imp2$varimps), xlab = "", ylab = "ylab"
)
barplot(t(imp2$varimps), xlab = "", ylab = "ylab")
imp2$varimps
imp_plot <- t(as.matrix(imp2$varimps[, c("imp_linear", "imp_prognostic", "imp_prescriptive")]))
colnames(imp_plot) <- imp2$varname
# Labels and other parameters
ylab <- "Importance"
main <- "Variable Importance"
cex.axis <- 0.8
legend.text <- c("Linear", "Prognostic", "Prescriptive")
args.legend <- list(x = "topright", bty = "n", inset = c(-0.1, 0))
# Create the stacked bar plot
barplot(imp_plot, beside = FALSE, col = c("skyblue", "orange", "green"),
xlab = "", ylab = ylab, main = main, cex.axis = cex.axis,
legend.text = legend.text, args.legend = args.legend)
imp_plot <- t(as.matrix(imp2$varimps[, c("imp_linear", "imp_prognostic", "imp_prescriptive")]))
colnames(imp_plot) <- imp2$varname
# Labels and other parameters
ylab <- "Importance"
main <- "Variable Importance"
cex.axis <- 0.8
legend.text <- c("Linear", "Prognostic", "Prescriptive")
args.legend <- list(x = "topright", bty = "n", inset = c(-0.1, 0))
# Create the stacked bar plot
barplot(imp_plot, beside = FALSE, col = c("skyblue", "orange", "green"),
xlab = xlab, ylab = ylab, main = main, cex.axis = cex.axis,
legend.text = legend.text, args.legend = args.legend)
# Labels and other parameters
xlab <- imp2$varimps$varname
ylab <- "Importance"
main <- "Variable Importance"
cex.axis <- 0.8
legend.text <- c("Linear", "Prognostic", "Prescriptive")
args.legend <- list(x = "topright", bty = "n", inset = c(-0.1, 0))
# Create the stacked bar plot
barplot(imp_plot, beside = FALSE, col = c("skyblue", "orange", "green"),
xlab = , ylab = ylab, main = main, cex.axis = cex.axis,
legend.text = legend.text, args.legend = args.legend)
imp_plot <- t(as.matrix(imp2$varimps[, c("imp_linear", "imp_prognostic", "imp_prescriptive")]))
colnames(imp_plot) <- imp2$varname
# Labels and other parameters
xlab <- imp2$varimps$varname
ylab <- "Importance"
main <- "Variable Importance"
cex.axis <- 0.8
legend.text <- c("Linear", "Prognostic", "Prescriptive")
args.legend <- list(x = "topright", bty = "n", inset = c(-0.1, 0))
# Create the stacked bar plot
barplot(imp_plot, beside = FALSE, col = c("skyblue", "orange", "green"),
xlab = , ylab = ylab, main = main, cex.axis = cex.axis,
legend.text = legend.text, args.legend = args.legend)
# Labels and other parameters
xlab <- imp2$varimps$varname
ylab <- "Importance"
main <- "Variable Importance"
cex.axis <- 0.8
legend.text <- c("Linear", "Prognostic", "Prescriptive")
args.legend <- list(x = "topright", bty = "n", inset = c(-0.1, 0))
# Create the stacked bar plot
barplot(imp_plot, beside = FALSE, col = c("skyblue", "orange", "green"),
xlab = xlab, ylab = ylab, main = main, cex.axis = cex.axis,
legend.text = legend.text, args.legend = args.legend)
imp_plot <- t(as.matrix(imp2$varimps[, c("imp_linear", "imp_prognostic", "imp_prescriptive")]))
colnames(imp_plot) <- imp2$varname
# Labels and other parameters
ylab <- "Importance"
main <- "Variable Importance"
cex.axis <- 0.8
legend.text <- c("Linear", "Prognostic", "Prescriptive")
args.legend <- list(x = "topright", bty = "n", inset = c(-0.1, 0))
# Create the stacked bar plot with x-axis labels
barplot(imp_plot, beside = FALSE, col = c("skyblue", "orange", "green"),
xlab = "Variables", ylab = ylab, main = main, cex.axis = cex.axis,
legend.text = legend.text, args.legend = args.legend, names.arg = colnames(imp_plot))
imp_plot
imp_plot <- t(as.matrix(imp$varimps[, c("imp_linear", "imp_prognostic", "imp_prescriptive")]))
colnames(imp_plot) <- imp$varimps$varname
imp_plot <- t(as.matrix(imp$varimps[, c("imp_linear", "imp_prognostic", "imp_prescriptive")]))
imp <- specify_imps(imp)
imp
imp_plot <- t(as.matrix(imp$varimps[, c("imp_linear", "imp_prognostic", "imp_prescriptive")]))
colnames(imp_plot) <- imp$varimps$varname
imp_plot
# Labels and other parameters
ylab <- "Importance"
main <- "Variable Importance"
cex.axis <- 0.8
legend.text <- c("Linear", "Prognostic", "Prescriptive")
args.legend <- list(x = "topright", bty = "n", inset = c(-0.1, 0))
# Create the stacked bar plot with x-axis labels
barplot(imp_plot, beside = FALSE, col = c("skyblue", "orange", "green"),
xlab = "Variables", ylab = ylab, main = main, cex.axis = cex.axis,
legend.text = legend.text, args.legend = args.legend, names.arg = colnames(imp_plot))
imp_plot <- imp_plot[, order(imp_plot$imp_total, decreasing = TRUE)]
class(imp_plot)
imp_plot
imp_plot <- imp_plot[, order(rowSums(imp_plot), decreasing = TRUE)]
imp_plot <- imp_plot[, order(colSums(imp_plot), decreasing = TRUE)]
order(colSums(imp_plot)
order(colSums(imp_plot))
order(colSums(imp_plot))
order(rowSums(imp_plot))
colSums(imp_plot)
imp <- specify_imps(imp)
imp
colnames(imp_plot) <- imp$varimps$varname
imp$varimps
imp_plot
imp$varimps
imp_plot
imp <- specify_imps(imp)
imp
imp$varimps
imp_plot <- t(as.matrix(imp$varimps[, c("imp_linear", "imp_prognostic", "imp_prescriptive")]))
imp_plot
colnames(imp_plot) <- imp$varimps$varname
colSums(imp_plot)
order(colSums(imp_plot))
order(colSums(imp_plot), decreasing = TRUE)
if ("package:preGroup" %in% search()) {
detach("package:preGroup", unload = TRUE)
}
library(usethis)
library(devtools)
library(roxygen2)
library(rmarkdown)
library(codetools)
# Define the package path
path_preGroup <- "C:\\Users\\Kaiwen\\desktop\\preGroup"
# Set the working directory
setwd(path_preGroup)
# Create the package structure
usethis::create_package(path_preGroup, open = FALSE)
# Set the author and description
usethis::use_description(fields = list(
Title = "Prediction rule ensembles with group level variable selection",
Description = "Generate prediction rule ensembles that select variables at the group levels: linear, prognostic (rules that do not include treatment indicator), and prescriptive (rules which include treatment indicator).",
`Authors@R` = c(
person(given = "Kaiwen", family = "Liu", email = "k.liu.8@umail.leidenuniv.nl", role = c("aut", "cre")),
person(given = "Marjolein", family = "Fokkema", role = c("aut"), email = "m.fokkema@fsw.leidenuniv.nl")
),
Licence = use_gpl3_license(),
Encoding = "UTF-8",
Roxygen = list(markdown = TRUE),
RoxygenNote = "7.3.1"
))
# Add required packages to Imports
usethis::use_package("mvs")
usethis::use_package("pre")
usethis::use_package("Formula")
usethis::use_package("survival")
usethis::use_package("MatrixModels")
# Add suggested packages
usethis::use_package("ggplot2", type = "Suggests")
usethis::use_package("testthat", type = "Suggests")
usethis::use_package("knitr", type = "Suggests")
usethis::use_package("rmarkdown", type = "Suggests")
# # Create a vignette template
usethis::use_vignette("introduction")
# # Document the package using roxygen2
devtools::document(pkg = path_preGroup)
devtools::build(path_preGroup, vignettes = TRUE)
rm(list = ls())
# Install the package from the tarball
install.packages("C:/Users/Kaiwen/Desktop/preGroup_0.0.0.9000.tar.gz", repos = NULL, type = "source")
# Load the package
library("preGroup")
if ("package:preGroup" %in% search()) {
detach("package:preGroup", unload = TRUE)
}
# Install the package from the tarball
install.packages("C:/Users/Kaiwen/Desktop/preGroup_0.0.0.9000.tar.gz", repos = NULL, type = "source")
# Load the package
library("preGroup")
# List the functions in the package. Why are the exported s3 methods not recognized?
ls("package:preGroup")
# rm(list = ls())
library(BART)
set.seed(123)
data(ACTG175)
colnames(ACTG175)
result <- preGroup(symptom ~ age+wtkg+cd40+cd420, treatment_indicator = "gender", data = ACTG175)
preGroup_smr <- summary(result)
preGroup_smr
coef(result)
imp <- importance(result)
print(imp)
rm(list = ls())
?create_package
library(usethis)
library(devtools)
library(roxygen2)
library(rmarkdown)
library(codetools)
# Define the package path
path_preGroup <- "C:\\Users\\Kaiwen\\desktop\\preGroup"
# Set the working directory
setwd(path_preGroup)
# Create the package structure
usethis::create_package(path_preGroup, open = FALSE)
usethis::use_description(fields = list(
Title = "Prediction rule ensembles with group level variable selection",
Description = "Generate prediction rule ensembles that select variables at the group levels: linear, prognostic (rules that do not include treatment indicator), and prescriptive (rules which include treatment indicator).",
`Authors@R` = c(
person(given = "Kaiwen", family = "Liu", email = "k.liu.8@umail.leidenuniv.nl", role = c("aut", "cre")),
person(given = "Marjolein", family = "Fokkema", role = c("aut"), email = "m.fokkema@fsw.leidenuniv.nl")
),
Licence = use_gpl3_license(),
Encoding = "UTF-8",
Roxygen = list(markdown = TRUE),
RoxygenNote = "7.3.1"
))
# Add required packages to Imports
usethis::use_package("mvs")
usethis::use_package("pre")
usethis::use_package("Formula")
usethis::use_package("survival")
usethis::use_package("MatrixModels")
# Add suggested packages
usethis::use_package("ggplot2", type = "Suggests")
usethis::use_package("testthat", type = "Suggests")
usethis::use_package("knitr", type = "Suggests")
usethis::use_package("rmarkdown", type = "Suggests")
# Add VignetteBuilder
# # Create a vignette template
usethis::use_vignette("introduction")
# # Document the package using roxygen2
devtools::document(pkg = path_preGroup)
devtools::build(path_preGroup, vignettes = TRUE)
if ("package:preGroup" %in% search()) {
detach("package:preGroup", unload = TRUE)
}
# Install the package from the tarball
install.packages("C:/Users/Kaiwen/Desktop/preGroup_0.0.0.9000.tar.gz", repos = NULL, type = "source")
# rm(list = ls())
library(BART)
set.seed(123)
data(ACTG175)
colnames(ACTG175)
result <- preGroup(symptom ~ age+wtkg+cd40+cd420, treatment_indicator = "gender", data = ACTG175)
# Load the package
library("preGroup")
# rm(list = ls())
library(BART)
set.seed(123)
data(ACTG175)
colnames(ACTG175)
result <- preGroup(symptom ~ age+wtkg+cd40+cd420, treatment_indicator = "gender", data = ACTG175)
preGroup_smr <- summary(result)
preGroup_smr
coef(result)
imp <- importance(result)
print(imp)
result <- preGroup(symptom ~ age+wtkg+cd40+cd420+gender+karnof+cd496, treatment_indicator = "gender", data = ACTG175)
preGroup_smr <- summary(result)
preGroup_smr
coef(result)
imp <- importance(result)
print(imp)
result <- preGroup(symptom ~ age+wtkg+cd40+cd420+gender+karnof+cd496+days+offtrt, treatment_indicator = "arms", data = ACTG175)
result <- preGroup(symptom ~ age+wtkg+cd40+cd420+gender+karnof+cd496+days+offtrt, treatment_indicator = "gender", data = ACTG175)
preGroup_smr <- summary(result)
preGroup_smr
preGroup_smr <- summary(result)
# preGroup_smr
coef(result)
imp <- importance(result)
print(imp)
