% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/preGroup.r, R/preTreatment.r
\name{predict.preTreatment}
\alias{predict.preTreatment}
\title{Predicts responses based on a \code{preTreatment} model and new data.}
\usage{
\method{predict}{preTreatment}(
  object,
  newdata,
  type = "response",
  binary_threshold = 0.5,
  return_binary_p = FALSE,
  ...
)

\method{predict}{preTreatment}(
  object,
  newdata,
  type = "response",
  binary_threshold = 0.5,
  return_binary_p = FALSE,
  ...
)
}
\arguments{
\item{object}{A \code{preTreatment} model object from which predictions will be made.}

\item{newdata}{New data on which predictions are to be made.}

\item{type}{The type of prediction to be made: 'response' or 'HTE'. Type 'response' returns the predicted
response values, while 'HTE' returns the heterogeneous treatment effects (for causal modelling).
For gaussian outcome, the predicted result is on the original scale of the response variable.
For binomial outcome, the predicted result is the p(Y = 1|Xs) for type "response". The probability can then be manually converte into a binary outcome
by users.
For binomial outcome, the predicted result is the odds ratio of the treatment condition against the control condition for type "HTE":
p1 = p(Y = 1|Treatment, Xs)
p2 = p(Y = 1|Control, Xs)
Odds ratio = (p1 / (1-p1)) / (p2 / (1 - p2)).}

\item{binary_threshold}{The threshold for converting probabilities to binary outcomes. Default is 0.5.}

\item{return_binary_p}{Logical, indicating whether to return binary probabilities for binomial outcomes. Default is FALSE (returns binary outcomes).}

\item{...}{Additional arguments passed to or from other methods.}
}
\value{
A vector of predicted responses.

A vector of predicted responses.
}
\description{
Predicts responses based on a \code{preTreatment} model and new data.

Predicts responses based on a \code{preTreatment} model and new data.
}
\details{
The function checks if the model object is a \code{preTreatment} and then uses the
\code{get_new_X} function to transform new data into the model matrix format. Predictions
are then made using the multivariate structure of the \code{preTreatment} model.

The function checks if the model object is a \code{preTreatment} and then uses the
\code{get_new_X} function to transform new data into the model matrix format. Predictions
are then made using the multivariate structure of the \code{preTreatment} model.
}
\examples{
# Assuming `model` is a preTreatment model and `new_data` is available
\dontrun{
mod <- preTreatment(Species ~ ., data = iris, treatment_indicator = "Petal.Width")
new_data <- iris[1:5, ]
predictions <- predict(mod, new_data)
}
set.seed(123)  # For reproducibility
# Number of rows
n <- 200

# Generate 5 binary variables
binary_vars <- as.data.frame(replicate(5, sample(0:1, n, replace = TRUE)))
names(binary_vars) <- paste0("X", 1:5)

# Generate 10 categorical variables with 3 levels each
categorical_vars <- as.data.frame(replicate(10, sample(letters[1:3], n, replace = TRUE)))
names(categorical_vars) <- paste0("X", 6:15)

# Generate 10 continuous variables
continuous_vars <- as.data.frame(replicate(10, rnorm(n)))
names(continuous_vars) <- paste0("X", 16:25)
# Combine all predictor variables
predictors <- cbind(binary_vars, categorical_vars, continuous_vars)
y <- with(predictors, {
  2 * sin(X16) + 3 * cos(X17) + X1 * X18^2 - X2 * X19 + X3 * X20^3 +
    as.numeric(X1 == 1 & X9 == "b") + as.numeric(X1 == 1 & X16 < 0) +
    as.numeric(X6 == "a") * X21 + as.numeric(X7 == "b") * X22 +
    as.numeric(X8 == "c") * X23 +
    25 * as.numeric(X8 == "c") + 2 * as.numeric(X9 == "b") + X16 + X18 + X19 + rnorm(n)  # Adding some noise
})
#Combine predictors and response into a single data frame
simdata1 <- data.frame(y = y, predictors)

result <- preTreatment(y ~ ., treatment_indicator = "X1", data = simdata1, alpha.mvs = c(0,1))

newdata1 <- data.frame(y = y + rnorm(n), predictors + rnorm(n) + 2sin(X16) + 3cos(X17) + X1 * X18^2 - X2 * X19 + X3 * X20^3)

pred_response <- predict(result, newdata1, type = "response")
pred_hte <- predict(result, newdata1, type = "HTE")
}
