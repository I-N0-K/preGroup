% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/preGroup.r, R/preTreatment.r
\name{coef.preTreatment}
\alias{coef.preTreatment}
\title{Extract Grouped Coefficients from preTreatment Model}
\usage{
\method{coef}{preTreatment}(object, ...)

\method{coef}{preTreatment}(object, ...)
}
\arguments{
\item{object}{A model object, which must be of class \code{preTreatment}.}

\item{...}{Additional arguments passed to or from other methods.}
}
\value{
A data frame of combined coefficients and descriptions, sorted with respect to origin.

A data frame of combined coefficients and descriptions, sorted with respect to origin.
}
\description{
This function calculates the aggregated coefficients for a \code{preTreatment} model,
combining intercepts and coefficients from different hierarchical levels.

This function calculates the aggregated coefficients for a \code{preTreatment} model,
combining intercepts and coefficients from different hierarchical levels.
}
\details{
The function first verifies the class of the model, then extracts and processes
coefficients from multiple levels of the model to compute the grand intercept and other
subgroup coefficients. It finally merges these results with the rule descriptions from
the \code{pre_fit} component of the model, handles missing descriptions, and sorts the resulting data frame.

The function first verifies the class of the model, then extracts and processes
coefficients from multiple levels of the model to compute the grand intercept and other
subgroup coefficients. It finally merges these results with the rule descriptions from
the \code{pre_fit} component of the model, handles missing descriptions, and sorts the resulting data frame.
}
\examples{
set.seed(123)  # For reproducibility
# Number of rows
n <- 200

# Generate 5 binary variables
binary_vars <- as.data.frame(replicate(5, sample(0:1, n, replace = TRUE)))
names(binary_vars) <- paste0("X", 1:5)

# Generate 10 categorical variables with 3 levels each
categorical_vars <- as.data.frame(replicate(10, sample(letters[1:3], n, replace = TRUE)))
names(categorical_vars) <- paste0("X", 6:15)

# Generate 10 continuous variables
continuous_vars <- as.data.frame(replicate(10, rnorm(n)))
names(continuous_vars) <- paste0("X", 16:25)
# Combine all predictor variables
predictors <- cbind(binary_vars, categorical_vars, continuous_vars)
y <- with(predictors, {
  2 * sin(X16) + 3 * cos(X17) + X1 * X18^2 - X2 * X19 + X3 * X20^3 +
    as.numeric(X1 == 1 & X9 == "b") + as.numeric(X1 == 1 & X16 < 0) +
    as.numeric(X6 == "a") * X21 + as.numeric(X7 == "b") * X22 +
    as.numeric(X8 == "c") * X23 +
    25 * as.numeric(X8 == "c") + 2 * as.numeric(X9 == "b") + X16 + X18 + X19 + rnorm(n)  # Adding some noise
})
#Combine predictors and response into a single data frame
simdata1 <- data.frame(y = y, predictors)

result <- preTreatment(y ~ ., treatment_indicator = "X1", data = simdata1, alpha.mvs = c(0,1))

coef(result)

set.seed(123)  # For reproducibility
# Number of rows
n <- 200

# Generate 5 binary variables
binary_vars <- as.data.frame(replicate(5, sample(0:1, n, replace = TRUE)))
names(binary_vars) <- paste0("X", 1:5)

# Generate 10 categorical variables with 3 levels each
categorical_vars <- as.data.frame(replicate(10, sample(letters[1:3], n, replace = TRUE)))
names(categorical_vars) <- paste0("X", 6:15)

# Generate 10 continuous variables
continuous_vars <- as.data.frame(replicate(10, rnorm(n)))
names(continuous_vars) <- paste0("X", 16:25)
# Combine all predictor variables
predictors <- cbind(binary_vars, categorical_vars, continuous_vars)
y <- with(predictors, {
  2 * sin(X16) + 3 * cos(X17) + X1 * X18^2 - X2 * X19 + X3 * X20^3 +
    as.numeric(X1 == 1 & X9 == "b") + as.numeric(X1 == 1 & X16 < 0) +
    as.numeric(X6 == "a") * X21 + as.numeric(X7 == "b") * X22 +
    as.numeric(X8 == "c") * X23 +
    25 * as.numeric(X8 == "c") + 2 * as.numeric(X9 == "b") + X16 + X18 + X19 + rnorm(n)  # Adding some noise
})
#Combine predictors and response into a single data frame
simdata1 <- data.frame(y = y, predictors)

result <- preTreatment(y ~ ., treatment_indicator = "X1", data = simdata1, alpha.mvs = c(0,1))

coef(result)

}
